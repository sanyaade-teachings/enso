from Standard.Base import all
from Standard.Table import Column, Table
from Standard.Test import all
from Standard.Table.Errors import all
import Standard.Base.Errors.Common.Type_Error

from project.Util import all

type Data
    #   | Flight | Passenger | Ticket Price
    #---+--------+-----------+--------------
    # 0 | BA0123 | A         | 100.5
    # 1 | BA0123 | B         | 575.99
    # 2 | SG0456 | A         | 73.23
    # 3 | BA0123 | C         | 112.34
    # 4 | SG0456 | E         | 73.77
    Value ~table

    setup =
        make_table =
            flight = ["Flight", ["BA0123", "BA0123", "SG0456", "BA0123", "SG0456"]]
            passenger = ["Passenger", ["A", "B", "A", "C", "E"]]
            ticket_price = ["Ticket Price", [100.50, 575.99, 73.23, 112.34, 73.77]]

            Table.new [flight, passenger, ticket_price]
        Data.Value make_table

add_specs suite_builder =
    suite_builder.group "running count" group_builder->
        data = Data.setup
        group_builder.specify "Defaults add running count of first column" <|
            result = data.table.running
            expected_column = Column.from_vector "Running Count of Flight" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | Running Count of Flight
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 3
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Not setting the as name gives default name based on of column" <|
            result = data.table.running Statistic.Count "Passenger"
            expected_column = Column.from_vector "Running Count of Passenger" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | Running Count of Passenger
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 3
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can set the as name" <|
            result = data.table.running Statistic.Count "Passenger" "My Custom Name"
            expected_column = Column.from_vector "My Custom Name" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | My Custom Name
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 3
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running count per group" <|
            result = data.table.running Statistic.Count "Passenger" "Passenger num per flight" ["Flight"]
            expected_column = Column.from_vector "Passenger num per flight" [1, 2, 1, 3, 2]
            #   | Flight | Passenger | Ticket Price | Passenger num per flight
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 1
            # 3 | BA0123 | C         | 112.34       | 3
            # 4 | SG0456 | E         | 73.77        | 2
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running count per group based on order by" <|
            result = data.table.running Statistic.Count "Passenger" "Ranked ticket cost per pass" ["Passenger"] ["Ticket Price"]
            expected_column = Column.from_vector "Ranked ticket cost per pass" [2, 1, 1, 1, 1]
            #   | Flight | Passenger | Ticket Price | Ranked ticket cost per pass
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 2
            # 1 | BA0123 | B         | 575.99       | 1
            # 2 | SG0456 | A         | 73.23        | 1
            # 3 | BA0123 | C         | 112.34       | 1
            # 4 | SG0456 | E         | 73.77        | 1
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
    suite_builder.group "running sum" group_builder->
        data = Data.setup
        group_builder.specify "Not setting the as name gives default name based on of column" <|
            result = data.table.running Statistic.Sum "Ticket Price"
            expected_column = Column.from_vector "Running Sum of Ticket Price" [100.5, 676.49, 749.72, 862.06, 935.83]
            #   | Flight | Passenger | Ticket Price | Running Sum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | 73.23        | 749.72
            # 3 | BA0123 | C         | 112.34       | 862.06
            # 4 | SG0456 | E         | 73.77        | 935.83
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running sum per group" <|
            result = data.table.running Statistic.Sum "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 676.49, 73.23, 788.83, 147]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | 73.23        | 73.23
            # 3 | BA0123 | C         | 112.34       | 788.83
            # 4 | SG0456 | E         | 73.77        | 147
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running sum per group based on order by" <|
            result = data.table.running Statistic.Sum "Ticket Price" "Sum ticket cost per pass" ["Passenger"] ["Ticket Price"]
            expected_column = Column.from_vector "Sum ticket cost per pass" [100.5, 676.49, 73.23, 788.83, 147]
            #   | Flight | Passenger | Ticket Price | Sum ticket cost per pass
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 2
            # 1 | BA0123 | B         | 575.99       | 1
            # 2 | SG0456 | A         | 73.23        | 1
            # 3 | BA0123 | C         | 112.34       | 1
            # 4 | SG0456 | E         | 73.77        | 1
            expected_table = data.table.zip expected_column
            result.should_equal expected_table

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter

