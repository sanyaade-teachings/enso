import project.Any.Any
import project.Data.Index_Sub_Range.Index_Sub_Range
import project.Data.Json.JS_Object
import project.Data.Numbers.Integer
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Matching_Mode.Matching_Mode
import project.Data.Text.Text
import project.Data.Text.Text_Sub_Range.Text_Sub_Range
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Date_Time_Formatter.Date_Time_Formatter
import project.Data.Vector.Vector
import project.Enso_Cloud.Errors.Enso_Cloud_Error
import project.Enso_Cloud.Internal.Enso_Path.Enso_Path
import project.Enso_Cloud.Internal.Utils
import project.Error.Error
import project.Errors.Common.Not_Found
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Illegal_State.Illegal_State
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Time_Error.Time_Error
import project.Errors.Unimplemented.Unimplemented
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Nothing.Nothing
import project.Runtime.Context
import project.System.File.File_Access.File_Access
import project.System.File.Generic.Writable_File.Writable_File
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.Input_Stream.Input_Stream
import project.System.Output_Stream.Output_Stream
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Data_Link import data_link_content_type, read_datalink
from project.Enso_Cloud.Public_Utils import get_required_field
from project.System.File_Format import Auto_Detect, Bytes, File_Format, Plain_Text_Format
from project.System.File.Generic.File_Write_Strategy import generic_copy

type Enso_File
    ## Resolves an `enso://` path and returns the corresponding `Enso_File`
       instance.

       Arguments:
       - path: The `enso://` path to a file or directory.

       ? Enso Cloud Paths

         The paths consist of the organization (user) name followed by a path to
         the file/directory delimited by `/`.
         For example `enso://my_org/some_dir/some-file.txt`.

       ! Work in progress - only existing resources

         Currently the API is only able to resolve paths to existing files or
         directories. This is a temporary limitation and it will be improved in
         the future, alongside with implementing the capabilities to write new
         files.
    new : Text -> Enso_File ! Not_Found
    new (path : Text) =
        parsed = Enso_Path.parse path
        parent = parsed.resolve_parent
        if parsed.asset_name == Nothing then parent else
            parent / parsed.asset_name

    ## PRIVATE
       Represents a file or folder within the Enso cloud.
    Value name:Text id:Text organization:Text asset_type:Enso_Asset_Type

    ## Represents the root folder of the current users.
    root : Enso_File
    root = Enso_File.Value "/" "" "" Enso_Asset_Type.Directory

    ## Represents the current working directory.

       If the workflow is running on the Cloud, this will be the directory
       containing the current project.

       If the workflow is running locally, this will default to the root
       directory.
    current_working_directory : Enso_File
    current_working_directory =
        java_dir = Utils.internal_cloud_project_directory
        if java_dir.is_nothing then Enso_File.root else
            Enso_File.Value java_dir.name java_dir.id java_dir.organizationId Enso_Asset_Type.Directory

    ## PRIVATE
       Target URI for the api
    internal_uri : Text
    internal_uri self = case self.id of
        "" -> if self.asset_type == Enso_Asset_Type.Directory then Utils.directory_api else
            Error.throw (Illegal_Argument.Error "Invalid ID for a "+self.asset_type.to_text+".")
        _ -> case self.asset_type of
            Enso_Asset_Type.Directory -> Utils.directory_api + "/" + self.id
            Enso_Asset_Type.File -> Utils.files_api + "/" + self.id
            Enso_Asset_Type.Project -> Utils.projects_api + "/" + self.id
            Enso_Asset_Type.Data_Link -> Utils.datalinks_api + "/" + self.id
            Enso_Asset_Type.Secret -> Error.throw (Illegal_Argument.Error "Secrets cannot be accessed directly.")

    ## GROUP Metadata
       Checks if the folder or file exists
    exists : Boolean
    exists self =
        response = Utils.http_request HTTP_Method.Get self.internal_uri
        response.code.is_success

    ## GROUP Metadata
       Gets the size of a file in bytes.
    size : Integer
    size self -> Integer = if self.is_regular_file.not then Error.throw (Illegal_Argument.Error "`size` can only be queried for regular files.") else
        metadata = get_file_description self |> get_required_field "metadata"
        get_required_field "size" metadata expected_type=Integer

    ## GROUP Metadata
       Gets the creation time of a file.
    creation_time : Date_Time
    creation_time self -> Date_Time = if self.is_directory then Unimplemented.throw "Enso_File.creation_time is not implemented yet for directories." else
        metadata = get_file_description self |> get_required_field "metadata"
        Date_Time.parse (get_required_field "created_at" metadata expected_type=Text) Date_Time_Formatter.iso_offset_date_time
            . catch Time_Error error-> Error.throw (Enso_Cloud_Error.Invalid_Response_Payload error)

    ## GROUP Metadata
       Gets the last modified time of a file.
    last_modified_time : Date_Time
    last_modified_time self = if self.is_directory then Unimplemented.throw "Enso_File.last_modified_time is not implemented yet for directories." else
        metadata = get_file_description self |> get_required_field "metadata"
        Date_Time.parse (get_required_field "modified_at" metadata expected_type=Text) Date_Time_Formatter.iso_offset_date_time
            . catch Time_Error error-> Error.throw (Enso_Cloud_Error.Invalid_Response_Payload error)

    ## GROUP Metadata
       Checks if this is a folder
    is_directory : Boolean
    is_directory self = self.asset_type == Enso_Asset_Type.Directory

    ## GROUP Metadata
       Checks if this is a regular file
    is_regular_file : Boolean
    is_regular_file self = self.asset_type == Enso_Asset_Type.File

    ## GROUP Metadata
       Finds the parent Enso_File for this file.
    parent : Enso_File | Nothing
    parent self = Unimplemented.throw "Enso_File.parent is not implemented"

    ## GROUP Metadata
       Returns the path of this file.
    path : Text
    path self = Unimplemented.throw "Enso_File.path is not implemented"

    ## GROUP Metadata
       Checks if `self` is a descendant of `other`.
    is_descendant_of : Enso_File -> Boolean
    is_descendant_of self (other : Enso_File) =
        _ = other
        Unimplemented.throw "Enso_File.is_descendant_of is not implemented"

    ## PRIVATE
       ADVANCED
       Creates a new output stream for this file and runs the specified action
       on it.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the output stream and returns some
         value. The value is returned from this method.
    with_output_stream : Vector File_Access -> (Output_Stream -> Any ! File_Error) -> Any ! File_Error
    with_output_stream self (open_options : Vector) action =
        _ = [open_options, action]
        Unimplemented.throw "Writing to Enso_Files is not currently implemented."

    ## PRIVATE
       ADVANCED
       Creates a new input stream for this file and runs the specified action
       on it.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the input stream and returns some
         value. The value is returned from this method.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).
    with_input_stream : Vector File_Access -> (Input_Stream -> Any ! File_Error) -> Any ! File_Error | Illegal_Argument
    with_input_stream self (open_options : Vector) action =
        open_as_data_link = (open_options.contains Data_Link_Access.No_Follow . not) && (Data_Link.is_data_link self)
        if open_as_data_link then Data_Link.read_datalink_as_stream self open_options action else
            allowed_options = [File_Access.Read, Data_Link_Access.No_Follow]
            disallowed_options = open_options.filter o-> allowed_options.contains o . not
            if disallowed_options.not_empty then Error.throw (Illegal_Argument.Error "Invalid open options for reading: "+disallowed_options.to_text+".") else
                uri = case self of
                    Enso_File.File _ _ _ _ ->
                        get_download_url_for_file self
                    Enso_File.Data_Link _ _ _ _ ->
                        Runtime.assert (open_options.contains Data_Link_Access.No_Follow)
                        self.internal_uri
                    _ ->
                        Error.throw (Illegal_Argument.Error "Only files can be opened as a stream.")
                response = HTTP.fetch uri HTTP_Method.Get []
                response.if_not_error <| response.body.with_stream action

    ## ALIAS load, open
       GROUP Input
       ICON data_input
       Read a file using the specified file format

       Arguments:
       - format: A `File_Format` object used to read file into memory.
         If `Auto_Detect` is specified; the provided file determines the specific
         type and configures it appropriately. If there is no matching type then
         a `File_Error.Unsupported_Type` error is returned.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    @format File_Format.default_widget
    read : File_Format -> Problem_Behavior -> Any ! Illegal_Argument | File_Error
    read self format=Auto_Detect (on_problems=Problem_Behavior.Report_Warning) = case self.asset_type of
        Enso_Asset_Type.Project -> Error.throw (Illegal_Argument.Error "Projects cannot be read within Enso code. Open using the IDE.")
        Enso_Asset_Type.Secret -> Error.throw (Illegal_Argument.Error "Secrets cannot be read directly.")
        Enso_Asset_Type.Data_Link ->
            # TODO
            json = Utils.http_request_as_json HTTP_Method.Get self.internal_uri
            read_datalink json on_problems
        Enso_Asset_Type.Directory -> if format == Auto_Detect then self.list else Error.throw (Illegal_Argument.Error "Directories can only be read using the Auto_Detect format.")
        Enso_Asset_Type.File -> File_Format.handle_format_missing_arguments format <| case format of
            Auto_Detect ->
                real_format = Auto_Detect.get_reading_format self
                if real_format == Nothing then Error.throw (File_Error.Unsupported_Type self) else
                    self.read real_format on_problems
            _ ->
                metadata = File_Format_Metadata.from self
                self.with_input_stream [File_Access.Read] (stream-> format.read_stream stream metadata)

    ## ALIAS load bytes, open bytes
       ICON data_input
       Reads all bytes in this file into a byte vector.
    read_bytes : Vector ! File_Error
    read_bytes self =
        self.read Bytes

    ## ALIAS load text, open text
       ICON data_input
       Reads the whole file into a `Text`, with specified encoding.

       Arguments:
       - encoding: The text encoding to decode the file with. Defaults to UTF-8.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    @encoding Encoding.default_widget
    read_text : Encoding -> Problem_Behavior -> Text ! File_Error
    read_text self (encoding=Encoding.utf_8) (on_problems=Problem_Behavior.Report_Warning) =
        self.read (Plain_Text_Format.Plain_Text encoding) on_problems

    ## GROUP Metadata
       Returns the extension of the file.
    extension : Text
    extension self = case self.asset_type of
        Enso_Asset_Type.Directory -> Error.throw (Illegal_Argument.Error "Directories do not have extensions.")
        Enso_Asset_Type.Secret -> Error.throw (Illegal_Argument.Error "Secrets cannot be accessed directly.")
        Enso_Asset_Type.Project -> ".enso"
        _ ->
            name = self.name
            last_dot = name.locate "." mode=Matching_Mode.Last
            if last_dot.is_nothing then "" else
                extension = name.drop (Index_Sub_Range.First last_dot.start)
                if extension == "." then "" else extension

    ## GROUP Input
       Gets a list of assets within self.
    list : Vector Enso_File
    list self =
        # Remove secrets from the list - they are handled separately in `Enso_Secret.list`.
        list_assets self . filter f-> f.asset_type != Enso_Asset_Type.Secret

    ## UNSTABLE
       GROUP Output
       Creates a subdirectory in a specified directory.
    create_directory : Text -> Enso_File
    create_directory self (name : Text) = if self.is_directory.not then Error.throw (Illegal_Argument.Error "Only directories can contain subdirectories.") else
        name_field = [["title", name]]
        parent_field = if self.id == "" then [] else [["parentId", self.id]]
        body = JS_Object.from_pairs (name_field + parent_field)
        response = Utils.http_request_as_json HTTP_Method.Post Utils.directory_api body
        response.into Enso_File

    ## UNSTABLE
       GROUP Output
       Deletes the file or directory.
    delete : Nothing
    delete self = if self.id == "" then Error.throw (Illegal_Argument.Error "The root directory cannot be deleted.") else
        response = Utils.http_request HTTP_Method.Delete self.internal_uri
        response.if_not_error Nothing

    ## Deletes the file if it had existed.
    delete_if_exists : Nothing
    delete_if_exists self =
        r = self.delete
        r.catch File_Error err-> case err of
            File_Error.Not_Found _ -> Nothing
            _ -> r

    ## Copies the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    copy_to : Writable_File -> Boolean -> Any ! File_Error
    copy_to self (destination : Writable_File) (replace_existing : Boolean = False) =
        generic_copy self destination.file replace_existing

    ## Moves the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    move_to : Writable_File -> Boolean -> Nothing ! File_Error
    move_to self (destination : Writable_File) (replace_existing : Boolean = False) =
        _ = [destination, replace_existing]
        Context.Output.if_enabled disabled_message="File moving is forbidden as the Output context is disabled." panic=False <|
            Unimplemented.throw "Enso_File.move_to is not implemented"

    ## UNSTABLE
       GROUP Operators
       ICON folder
       Resolves a file or directory within this directory.
    / : Text -> Enso_File ! Not_Found
    / self (name : Text) -> Enso_File ! Not_Found =
        if self.is_directory.not then Error.throw (Illegal_Argument.Error "/ can only be used for directories") else
            if name.contains "/" then Error.throw (Illegal_Argument.Error "Resolving sub-paths (/) is not implemented. Temporary workaround: use the `/` operator multiple times.") else
                self.list . find f-> f.name == name

    ## Returns the text representation of the file descriptor.
    to_text : Text
    to_text self -> Text =
        if self == Enso_File.root then "Cloud Root Directory" else
            "Cloud " + self.asset_type.to_text + " " + self.name

## PRIVATE
list_assets parent = if parent.asset_type != Enso_Asset_Type.Directory then Error.throw (Illegal_Argument.Error "Only directories can be listed.") else
     response = Utils.http_request_as_json HTTP_Method.Get parent.internal_uri
     assets = get_required_field "assets" response
     assets.map t-> t.into Enso_File

## PRIVATE
Enso_File.from (that:JS_Object) = if ["title", "id", "parentId"].any (k-> that.contains_key k . not) then Error.throw (Illegal_Argument.Error "Invalid JSON for an Enso_File.") else
    name = that.get "title"
    id = that.get "id"
    org = that.get "organizationId" ""
    asset_type = (id.take (Text_Sub_Range.Before "-")):Enso_Asset_Type
    Enso_File.Value name id org asset_type

type Enso_Asset_Type
    ## Represents an Enso project.
    Project

    ## Represents an file.
    File

    ## Represents a folder.
    Directory

    ## Represents a secret.
    Secret

    ## Represents a connection to another data source.
    Data_Link

## PRIVATE
Enso_Asset_Type.from (that:Text) = case that of
    "project" -> Enso_Asset_Type.Project
    "file" -> Enso_Asset_Type.File
    "directory" -> Enso_Asset_Type.Directory
    "secret" -> Enso_Asset_Type.Secret
    "connector" -> Enso_Asset_Type.Data_Link
    _ -> Error.throw (Illegal_Argument.Error "Invalid asset type: "+that.pretty+".")

## PRIVATE
File_Format_Metadata.from (that:Enso_File) =
    # TODO this is just a placeholder, until we implement the proper path
    path = Nothing
    case that.asset_type of
        Enso_Asset_Type.Data_Link ->
            File_Format_Metadata.Value path=path name=that.name content_type=data_link_content_type
        Enso_Asset_Type.Directory ->
            File_Format_Metadata.Value path=path name=that.name extension=(that.extension.catch _->Nothing)
        Enso_Asset_Type.File ->
            File_Format_Metadata.Value path=path name=that.name extension=(that.extension.catch _->Nothing)
        _ -> Error.throw (Illegal_Argument.Error "`File_Format_Metadata` is not available for: "+self.asset_type.to_text+".")

## PRIVATE
   Fetches the basic information about a file from the Cloud endpoint.
get_file_description file:Enso_File -> JS_Object =
    Utils.http_request_as_json HTTP_Method.Get file.internal_uri

## PRIVATE
   The returned URL may be valid only for a very short time, so it should not be
   stored anywhere.
get_download_url_for_file file:Enso_File -> Text =
    file_description = get_file_description file
    presigned_url = file_description |> get_required_field "url" expected_type=Text
    presigned_url
