from Standard.Base import all
from Standard.Base.Enso_Cloud.Data_Link import parse_secure_value
from Standard.Base.Enso_Cloud.Public_Utils import get_optional_field, get_required_field

import project.Connection.Connection_Options.Connection_Options
import project.Connection.Credentials.Credentials
import project.Connection.Postgres_Details.Postgres_Details

## PRIVATE
type Postgres_Data_Link
    ## PRIVATE
       A data-link returning a connection to the specified database.
    Connection details:Postgres_Details

    ## PRIVATE
       A data-link returning a query to a specific table within a database.
    Table name:Text details:Postgres_Details


    ## PRIVATE
    parse json -> Postgres_Data_Link =
        host = get_required_field "host" json expected_type=Text
        port = get_required_field "port" json expected_type=Integer
        db_name = get_required_field "database_name" json expected_type=Text
        schema = get_optional_field "schema" json if_missing="" expected_type=Text

        credentials_json = get_optional_field "credentials" json
        credentials = credentials_json.if_not_nothing <|
            username = get_required_field "username" credentials_json |> parse_secure_value
            password = get_required_field "password" credentials_json |> parse_secure_value
            Credentials.Username_And_Password username password

        details = Postgres_Details.Postgres host=host port=port database=db_name schema=schema credentials=credentials
        case get_optional_field "table" json expected_type=Text of
            Nothing ->
                Postgres_Data_Link.Connection details
            table_name : Text ->
                Postgres_Data_Link.Table table_name details

    ## PRIVATE
    read self (format = Auto_Detect) (on_problems : Problem_Behavior) =
        _ = on_problems
        if format != Auto_Detect then Error.throw (Illegal_Argument.Error "Only the default Auto_Detect format should be used with a Postgres Data Link, because it does not point to a file resource, but a database entity, so setting a file format for it is meaningless.") else
            default_options = Connection_Options.Value
            connection = self.details.connect default_options
            case self of
                Postgres_Data_Link.Connection _ -> connection
                Postgres_Data_Link.Table table_name _ ->
                    connection.query table_name

    ## PRIVATE
    with_input_stream self (open_options : Vector) (action : Input_Stream -> Any) -> Any =
        Error.throw (Illegal_Argument.Error "A Postgres Data Link cannot be opened as a stream, because it points to a database entity, not a file resource.")
